[{"C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\reportWebVitals.js":"1","C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\index.tsx":"2","C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\App.tsx":"3","C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\utils\\init.ts":"4","C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\const\\index.ts":"5","C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\utils\\index.ts":"6","C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\utils\\Factory.ts":"7"},{"size":362,"mtime":1611942081159,"results":"8","hashOfConfig":"9"},{"size":543,"mtime":1611945561955,"results":"10","hashOfConfig":"9"},{"size":538,"mtime":1611943866399,"results":"11","hashOfConfig":"9"},{"size":4844,"mtime":1611979582994,"results":"12","hashOfConfig":"9"},{"size":967,"mtime":1611979037981,"results":"13","hashOfConfig":"9"},{"size":98,"mtime":1611978853365,"results":"14","hashOfConfig":"9"},{"size":3642,"mtime":1611979023827,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"r9brlc",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"21"},"C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\reportWebVitals.js",[],["34","35"],"C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\index.tsx",[],["36","37"],"C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\App.tsx",[],"C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\utils\\init.ts",["38","39"],"import Matter from \"matter-js\";\r\nimport { COLOR, PATHS, PEGS_GROUP, PINBALL_SIZE } from \"../const\";\r\nimport {\r\n  PegFactory,\r\n  BoundaryFactory,\r\n  PathFactory,\r\n  WallFactory,\r\n  SideWallFactory,\r\n  AwardAreaFactory,\r\n  ResetAreaFactory,\r\n} from \"./Factory\";\r\nimport { rand } from \"./index\";\r\n\r\nlet pinball: Matter.Body;\r\nlet engine: Matter.Engine,\r\n  world: Matter.World,\r\n  render: Matter.Render,\r\n  stopperGroup: number;\r\n\r\nfunction createStaticBodies(world: Matter.World) {\r\n  const pegs: Matter.Body[] = [];\r\n  for (let row = 0; row < PEGS_GROUP.ROW; row++) {\r\n    const cols = row % 2 ? PEGS_GROUP.CLOS : PEGS_GROUP.CLOS - 1;\r\n    const offset = row % 2 ? 0 : PEGS_GROUP.BASE_SIZE / 2;\r\n    const y = PEGS_GROUP.TOP_OFFSET + PEGS_GROUP.BASE_SIZE * row;\r\n    for (let col = 0; col < cols; col++) {\r\n      const x = PEGS_GROUP.LEFT_OFFSET + PEGS_GROUP.BASE_SIZE * col + offset;\r\n      pegs.push(PegFactory(x, y));\r\n    }\r\n  }\r\n\r\n  Matter.World.add(world, [\r\n    ...pegs,\r\n    BoundaryFactory(250, -30, 500, 100),\r\n    BoundaryFactory(250, 830, 500, 100),\r\n    BoundaryFactory(-30, 400, 100, 800),\r\n    BoundaryFactory(530, 400, 100, 800),\r\n\r\n    // dome\r\n    PathFactory(250, 90, PATHS.DOME),\r\n\r\n    // pegs (left, mid, right)\r\n    // shooter lane wall\r\n    WallFactory(445, 520, 20, 610, COLOR.OUTER),\r\n\r\n    // 三角墙\r\n    SideWallFactory(),\r\n    SideWallFactory(true),\r\n    AwardAreaFactory(),\r\n\r\n    ResetAreaFactory(465, 30),\r\n  ]);\r\n}\r\n\r\nfunction createPinball(world, stopperGroup: number) {\r\n  // x/y are set to when pinball is launched\r\n  pinball = Matter.Bodies.circle(0, 0, PINBALL_SIZE, {\r\n    label: \"pinball\",\r\n    restitution: 0.9,\r\n    collisionFilter: {\r\n      group: stopperGroup,\r\n    },\r\n    render: {\r\n      fillStyle: COLOR.PINBALL,\r\n    },\r\n  });\r\n  Matter.World.add(world, pinball);\r\n  launchPinball();\r\n}\r\n\r\nfunction launchPinball() {\r\n  // updateScore(0);\r\n  Matter.Body.setPosition(pinball, { x: 465, y: 765 });\r\n  Matter.Body.setVelocity(pinball, { x: 0, y: -25 + rand(-2, 2) });\r\n  Matter.Body.setAngularVelocity(pinball, 0);\r\n}\r\n\r\nfunction updateScore(newCurrentScore) {\r\n  // currentScore = newCurrentScore;\r\n  // $currentScore.text(currentScore);\r\n  // totalScore = Math.max(currentScore, totalScore);\r\n  // $totalScore.text(totalScore);\r\n}\r\n\r\nfunction pingReward(level: number) {\r\n  updateScore(0 * Math.pow(2, level));\r\n\r\n  // flash color\r\n  setTimeout(function () {\r\n    launchPinball();\r\n  }, 1000);\r\n}\r\n\r\nfunction pingBumper(bumper: Matter.Body) {\r\n  updateScore(0 + 10);\r\n\r\n  // flash color\r\n  bumper.render.fillStyle = COLOR.BUMPER_LIT;\r\n  setTimeout(function () {\r\n    bumper.render.fillStyle = COLOR.BUMPER;\r\n  }, 100);\r\n}\r\n\r\nexport default function init(element: React.MutableRefObject<any>) {\r\n  const GRAVITY = 0.75;\r\n  const WIREFRAMES = false;\r\n  engine = Matter.Engine.create();\r\n  world = engine.world;\r\n  world.bounds = {\r\n    min: { x: 0, y: 0 },\r\n    max: { x: 500, y: 800 },\r\n  };\r\n  world.gravity.y = GRAVITY; // simulate rolling on a slanted table\r\n\r\n  // render (shared)\r\n  render = Matter.Render.create({\r\n    element: element.current,\r\n    engine: engine,\r\n    options: {\r\n      width: world.bounds.max.x,\r\n      height: world.bounds.max.y,\r\n      wireframes: WIREFRAMES,\r\n      background: COLOR.BACKGROUND,\r\n    },\r\n  });\r\n  Matter.Render.run(render);\r\n\r\n  // runner\r\n  let runner = Matter.Runner.create();\r\n  Matter.Runner.run(runner, engine);\r\n\r\n  // used for collision filtering on various bodies\r\n  stopperGroup = Matter.Body.nextGroup(true);\r\n\r\n  // starting values\r\n  let currentScore, totalScore;\r\n  currentScore = 0;\r\n  totalScore = 0;\r\n\r\n  createStaticBodies(world);\r\n  createPinball(world, stopperGroup);\r\n\r\n  Matter.Events.on(engine, \"collisionStart\", function (event) {\r\n    let pairs = event.pairs;\r\n    pairs.forEach(function (pair) {\r\n      if (pair.bodyB.label === \"pinball\") {\r\n        switch (pair.bodyA.label) {\r\n          case \"reset\":\r\n            launchPinball();\r\n            break;\r\n          case \"reward\":\r\n            pingReward(pair.bodyA[\"rewardLevel\"]);\r\n            break;\r\n          case \"peg\":\r\n            pingBumper(pair.bodyA);\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  Matter.Events.on(engine, \"beforeUpdate\", function (event) {\r\n    // bumpers can quickly multiply velocity, so keep that in check\r\n    // 保险杠可以快速增加速度，所以要控制住\r\n    // Matter.Body.setVelocity(pinball, {\r\n    //   x: Math.max(Math.min(pinball.velocity.x, MAX_VELOCITY), -MAX_VELOCITY),\r\n    //   y: Math.max(Math.min(pinball.velocity.y, MAX_VELOCITY), -MAX_VELOCITY),\r\n    // });\r\n    // cheap way to keep ball from going back down the shooter lane\r\n    if (pinball) {\r\n      if (pinball.position.x > 450 && pinball.velocity.y > 0) {\r\n        Matter.Body.setVelocity(pinball, { x: 0, y: -10 });\r\n      }\r\n    }\r\n  });\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\const\\index.ts",[],"C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\utils\\index.ts",[],"C:\\Users\\Administrator\\Desktop\\trillion-rapier\\src\\utils\\Factory.ts",["40"],"import Matter from \"matter-js\";\r\nimport { COLOR, PEGS_GROUP, awardAreaConfig } from \"../const\";\r\n\r\nexport function PegFactory(x: number, y: number) {\r\n  const PEG_SIZE = 2;\r\n  const PINBALL_SIZE = 10;\r\n  return Matter.Bodies.circle(x, y, PEG_SIZE, {\r\n    label: \"peg\",\r\n    isStatic: true,\r\n    render: {\r\n      fillStyle: COLOR.BUMPER,\r\n    },\r\n  });\r\n}\r\n\r\nexport function BoundaryFactory(\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n) {\r\n  return Matter.Bodies.rectangle(x, y, width, height, {\r\n    isStatic: true,\r\n    render: {\r\n      fillStyle: COLOR.OUTER,\r\n    },\r\n  });\r\n}\r\n\r\nexport function PathFactory(x: number, y: number, path: string) {\r\n  let vertices = Matter.Vertices.fromPath(path, Matter.Body.create({}));\r\n  return Matter.Bodies.fromVertices(x, y, [vertices], {\r\n    isStatic: true,\r\n    render: {\r\n      fillStyle: COLOR.OUTER,\r\n\r\n      // add stroke and line width to fill in slight gaps between fragments\r\n      strokeStyle: COLOR.OUTER,\r\n      lineWidth: 1,\r\n    },\r\n  });\r\n}\r\n\r\nexport function WallFactory(\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  color: string,\r\n  angle = 0\r\n) {\r\n  return Matter.Bodies.rectangle(x, y, width, height, {\r\n    angle: angle,\r\n    isStatic: true,\r\n    chamfer: { radius: 10 },\r\n    render: {\r\n      fillStyle: color,\r\n    },\r\n  });\r\n}\r\n\r\n// 三角组合墙\r\nexport function SideWallFactory(right?: boolean) {\r\n  const s = 28;\r\n  const sideWallPoints = [0, 0, s / 2, 0, s, s, s / 2, 2 * s, 0, 2 * s];\r\n  const sideWallArray: Matter.Body[] = [];\r\n  for (let i = 0; i < 9; i++) {\r\n    sideWallArray.push(\r\n      Matter.Bodies.fromVertices(\r\n        right ? 438 : 17,\r\n        250 + 2 * s * i,\r\n        [\r\n          Matter.Vertices.fromPath(\r\n            sideWallPoints.join(\" \"),\r\n            Matter.Body.create({})\r\n          ),\r\n        ],\r\n        {\r\n          render: { fillStyle: COLOR.OUTER },\r\n        }\r\n      )\r\n    );\r\n  }\r\n  let sideWallBody = Matter.Body.create({\r\n    parts: sideWallArray,\r\n    isStatic: true,\r\n  });\r\n  if (right) {\r\n    Matter.Body.rotate(sideWallBody, Math.PI);\r\n  }\r\n  return sideWallBody;\r\n}\r\n\r\nexport function AwardAreaFactory() {\r\n  let awardAreaGroup: Matter.Body[] = [];\r\n  for (let index = 0; index < awardAreaConfig.length - 1; index++) {\r\n    const x =\r\n      PEGS_GROUP.LEFT_OFFSET +\r\n      (index === 0 ? 1 : PEGS_GROUP.BASE_SIZE) * awardAreaConfig[index].axisX;\r\n    awardAreaGroup.push(\r\n      Matter.Bodies.rectangle(x, 762, 0.5, 40, {\r\n        isStatic: true,\r\n        chamfer: { radius: 2 },\r\n        render: {\r\n          fillStyle: COLOR.INNER,\r\n          opacity: 0,\r\n        },\r\n      })\r\n    );\r\n  }\r\n  for (let index = 0; index < awardAreaConfig.length; index++) {\r\n    const x =\r\n      PEGS_GROUP.LEFT_OFFSET +\r\n      (index === 0 ? 1 : PEGS_GROUP.BASE_SIZE) * awardAreaConfig[index].axisX;\r\n    awardAreaGroup.push(\r\n      Matter.Bodies.rectangle(\r\n        x - (PEGS_GROUP.BASE_SIZE * awardAreaConfig[index].width) / 2,\r\n        761,\r\n        PEGS_GROUP.BASE_SIZE * awardAreaConfig[index].width - 2,\r\n        39,\r\n        {\r\n          label: \"reward\",\r\n          isStatic: true,\r\n          isSensor: true,\r\n          render: {\r\n            fillStyle: awardAreaConfig[index].color,\r\n          },\r\n        }\r\n      )\r\n    );\r\n  }\r\n  return Matter.Body.create({ parts: awardAreaGroup, isStatic: true });\r\n}\r\n\r\n// contact with these bodies causes pinball to be relaunched\r\nexport function ResetAreaFactory(x: number, width: number) {\r\n  return Matter.Bodies.rectangle(x, 781, width, 2, {\r\n    label: \"reset\",\r\n    isStatic: true,\r\n    render: {\r\n      fillStyle: \"#fff\",\r\n    },\r\n  });\r\n}\r\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":137,"column":3,"nodeType":"47","messageId":"48","endLine":137,"endColumn":15},{"ruleId":"45","severity":1,"message":"49","line":138,"column":3,"nodeType":"47","messageId":"48","endLine":138,"endColumn":13},{"ruleId":"45","severity":1,"message":"50","line":6,"column":9,"nodeType":"47","messageId":"48","endLine":6,"endColumn":21},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"@typescript-eslint/no-unused-vars","'currentScore' is assigned a value but never used.","Identifier","unusedVar","'totalScore' is assigned a value but never used.","'PINBALL_SIZE' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]